import streamlit as st
from dotenv import load_dotenv
import os
import matplotlib.pyplot as plt
from langgraph_flow import graph, get_graph_figure

load_dotenv()

st.title("✈️ AI-Powered Trip Matcher (LangGraph + Tool Calling Edition)")


# 🔍 Agent Summary Block
with st.expander("🧠 Agents Used in This Workflow"):
    st.markdown("""
- **Email Parser Agent**: Extracts origin, destination, date, and passenger count from trip request emails.
- **Aircraft Matcher Agent**: Filters available aircraft based on parsed input.
- **Routing Agent**: Estimates flight time and cost using distance calculations.
- **Tool Calling Router (GPT-4)**: Uses OpenAI tool-calling to choose between:
    - `get_weather(location)` → via NWS API
    - `get_reposition_suggestions(origin)` → via SQLite-based demand lookup
- **Explanation Agent**: Uses GPT-4 to explain why certain jets were selected.
    """)

# 📈 LangGraph Visualization
with st.expander("🧭 View Workflow Graph"):
    fig = get_graph_figure()
    st.pyplot(fig)

# ✉️ User Inputs
user_input = st.text_area("📧 Paste a trip request email:")
rule_text = st.text_input("🧠 Optional: Add a natural language rule (e.g., 'Only jets with 6+ seats')")

if st.button("Parse & Match"):
    if not os.getenv("OPENAI_API_KEY"):
        st.error("❌ Missing OpenAI API key.")
    elif not user_input.strip():
        st.warning("⚠️ Please enter a trip request email.")
    else:
        input_state = {"email": user_input, "rule": rule_text}
        result = graph.invoke(input_state)

        route = result.get("route", "unknown")
        if route == "get_weather":
            st.info("🧭 Tool Router selected: **Weather Agent** (via NWS)")
        elif route == "get_reposition_suggestions":
            st.info("🧭 Tool Router selected: **Repositioning Agent (SQLite)**")
        else:
            st.warning("🧭 Router decision could not be determined.")

        with st.expander("🛠️ Routing Debug Info"):
            st.text(f"Route decision: {route}")
            st.json(result)

        # 🧠 Email Parser Output
        st.subheader("🧠 Parsed Trip Details")
        st.caption("Extracted from the email using OpenAI.")
        st.json(result.get("parsed_trip", {}))

        # ⛅ Weather (if present)
        if route == "get_weather":
            st.subheader("⛅ Weather Check")
            st.caption("From National Weather Service")
            weather = result.get("weather", {})
            if "origin_weather" in weather:
                st.markdown("**Origin Weather:**")
                st.write(weather["origin_weather"])
            if "destination_weather" in weather:
                st.markdown("**Destination Weather:**")
                st.write(weather["destination_weather"])
            if "safe_to_fly" in weather:
                if weather["safe_to_fly"]:
                    st.success("✅ Safe to fly (wind < 45 mph)")
                else:
                    st.error("⚠️ Unsafe to fly (wind too strong)")

        # 🔁 Repositioning (if present)
        if route == "get_reposition_suggestions":
            st.subheader("📍 Repositioning Suggestions")
            st.caption("Based on demand from origin city")
            suggestions = result.get("reposition_suggestions", {}).get("reposition_suggestions", [])
            for s in suggestions:
                st.write(f"• **{s['destination']}** — Demand: {s['demand']}")

        # ✈️ Final Matched Aircraft
        st.subheader("✈️ Matched Aircraft")
        st.caption("Based on rules, availability, and route estimates")
        matched = result.get("final_aircrafts", [])
        if matched:
            for ac in matched:
                col1, col2, col3 = st.columns(3)
                col1.metric("Aircraft ID", ac["id"])
                col2.metric("Seats", ac["seats"])
                col3.metric("Range (km)", ac["range_km"])
                col1.metric("Cost/hr", f"${ac['cost_per_hour']}")
                col2.metric("Flight Time (hr)", ac.get("estimated_flight_time_hr", "N/A"))
                col3.metric("Est. Cost", f"${ac.get('estimated_cost', 'N/A')}")
                st.markdown("---")
        else:
            st.warning("No aircraft matched the rule or availability.")

        # 💬 Explanation Agent
        explanation = result.get("explanation", "")
        if explanation:
            st.subheader("💡 Why These Aircraft?")
            st.caption("Generated by GPT-4")
            st.write(explanation)
